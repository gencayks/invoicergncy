import type { Template } from "@/types/template"

// Helper function to get active template ID from localStorage
export const getActiveTemplateId = (): string => {
  if (typeof window === "undefined") return "classic"

  try {
    const activeTemplateId = localStorage.getItem("activeTemplateId")
    return activeTemplateId || "classic"
  } catch (error) {
    console.error("Error getting active template ID:", error)
    return "classic"
  }
}

// Helper function to set active template ID in localStorage
export const setActiveTemplateId = (id: string): void => {
  if (typeof window === "undefined") return

  try {
    localStorage.setItem("activeTemplateId", id)
  } catch (error) {
    console.error("Error setting active template ID:", error)
  }
}

// Default system templates
const systemTemplates: Template[] = [
  {
    id: "classic",
    name: "Classic",
    description: "A traditional invoice layout with a clean, professional design",
    isSystem: true,
    colors: {
      primary: "#000000",
      secondary: "#4B5563",
      accent: "#E5E7EB",
      background: "#FFFFFF",
      text: "#111827",
    },
    fonts: {
      heading: "Georgia, serif",
      body: "system-ui, sans-serif",
      accent: "monospace",
    },
    layout: {
      headerPosition: "top",
      logoPosition: "left",
      itemStyle: "simple",
      showBorders: true,
      showAlternateRows: false,
      footerStyle: "simple",
    },
    defaults: {
      paymentTerms: "Payment due within 30 days",
      notes: "Thank you for your business",
      footer: "Invoice generated by gncy",
    },
    preview: "/placeholder.svg?height=200&width=300",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: "modern",
    name: "Modern",
    description: "A contemporary design with a sleek, minimalist aesthetic",
    isSystem: true,
    colors: {
      primary: "#3B82F6",
      secondary: "#6B7280",
      accent: "#EFF6FF",
      background: "#FFFFFF",
      text: "#1F2937",
    },
    fonts: {
      heading: "Inter, sans-serif",
      body: "Inter, sans-serif",
      accent: "Inter, sans-serif",
    },
    layout: {
      headerPosition: "split",
      logoPosition: "right",
      itemStyle: "detailed",
      showBorders: false,
      showAlternateRows: true,
      footerStyle: "detailed",
    },
    defaults: {
      paymentTerms: "Please pay within 14 days of receipt",
      notes: "All prices are in {{currency}} and exclude applicable taxes",
      footer: "Thank you for your business",
    },
    preview: "/placeholder.svg?height=200&width=300",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: "minimal",
    name: "Minimal",
    description: "A simplified layout focusing on essential information",
    isSystem: true,
    colors: {
      primary: "#6B7280",
      secondary: "#9CA3AF",
      accent: "#F3F4F6",
      background: "#FFFFFF",
      text: "#111827",
    },
    fonts: {
      heading: "system-ui, sans-serif",
      body: "system-ui, sans-serif",
      accent: "system-ui, sans-serif",
    },
    layout: {
      headerPosition: "top",
      logoPosition: "center",
      itemStyle: "compact",
      showBorders: false,
      showAlternateRows: false,
      footerStyle: "simple",
    },
    defaults: {
      paymentTerms: "Payment due on receipt",
      notes: "",
      footer: "gncy Invoice",
    },
    preview: "/placeholder.svg?height=200&width=300",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: "professional",
    name: "Professional",
    description: "A formal design suitable for corporate and business use",
    isSystem: true,
    colors: {
      primary: "#1E3A8A",
      secondary: "#475569",
      accent: "#EFF6FF",
      background: "#FFFFFF",
      text: "#0F172A",
    },
    fonts: {
      heading: "Georgia, serif",
      body: "system-ui, sans-serif",
      accent: "monospace",
    },
    layout: {
      headerPosition: "top",
      logoPosition: "left",
      itemStyle: "detailed",
      showBorders: true,
      showAlternateRows: true,
      footerStyle: "detailed",
    },
    defaults: {
      paymentTerms: "Net 30 days. Late payments subject to a 1.5% monthly finance charge",
      notes: "Please include the invoice number with your payment",
      footer: "Thank you for your business. We appreciate your prompt payment.",
    },
    preview: "/placeholder.svg?height=200&width=300",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: "creative",
    name: "Creative",
    description: "A distinctive design for creative professionals and agencies",
    isSystem: true,
    colors: {
      primary: "#9333EA",
      secondary: "#6B7280",
      accent: "#F5F3FF",
      background: "#FFFFFF",
      text: "#111827",
    },
    fonts: {
      heading: "Poppins, sans-serif",
      body: "Poppins, sans-serif",
      accent: "Poppins, sans-serif",
    },
    layout: {
      headerPosition: "split",
      logoPosition: "center",
      itemStyle: "detailed",
      showBorders: false,
      showAlternateRows: true,
      footerStyle: "detailed",
    },
    defaults: {
      paymentTerms: "Payment due within 14 days",
      notes: "All creative work remains the property of the creator until payment is received in full",
      footer: "Created with â™¥ by gncy",
    },
    preview: "/placeholder.svg?height=200&width=300",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
]

// Storage keys
const TEMPLATES_STORAGE_KEY = "gncy_invoice_templates"
const ACTIVE_TEMPLATE_KEY = "gncy_active_template"

// Update the templateStorage object to include a synchronous version of getAllTemplates

// Template storage service that uses localStorage for client-side and will use Supabase when ready
export const templateStorage = {
  // Get all templates (system + custom)
  getAllTemplates: (): Template[] => {
    // For now, return system templates as a fallback
    return systemTemplates
  },

  // Get a specific template by ID
  getTemplateById: (id: string): Template | undefined => {
    return systemTemplates.find((template) => template.id === id)
  },

  // Create a new template
  createNewTemplate: (): Template => {
    const id = `custom-${Date.now()}`
    const newTemplate: Template = {
      id,
      name: "New Template",
      description: "Custom template",
      isSystem: false,
      colors: {
        primary: "#000000",
        secondary: "#4B5563",
        accent: "#E5E7EB",
        background: "#FFFFFF",
        text: "#111827",
      },
      fonts: {
        heading: "system-ui, sans-serif",
        body: "system-ui, sans-serif",
        accent: "system-ui, sans-serif",
      },
      layout: {
        headerPosition: "top",
        logoPosition: "left",
        itemStyle: "simple",
        showBorders: true,
        showAlternateRows: false,
        footerStyle: "simple",
      },
      defaults: {
        paymentTerms: "Payment due within 30 days",
        notes: "Thank you for your business",
        footer: "Invoice generated by gncy",
      },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    }

    return newTemplate
  },

  // Save a template
  saveTemplate: (template: Template): Template => {
    // In a real implementation, this would save to Supabase
    // For now, just return the template
    return template
  },

  // Delete a template
  deleteTemplate: (id: string): boolean => {
    // In a real implementation, this would delete from Supabase
    // For now, just return true
    return true
  },

  // Duplicate a template
  duplicateTemplate: (id: string): Template | null => {
    const template = templateStorage.getTemplateById(id)
    if (!template) return null

    const newTemplate: Template = {
      ...template,
      id: `custom-${Date.now()}`,
      name: `${template.name} (Copy)`,
      isSystem: false,
      updatedAt: new Date().toISOString(),
    }

    return newTemplate
  },

  // Set active template
  setActiveTemplate: (id: string): void => {
    setActiveTemplateId(id)
  },

  // Get active template
  getActiveTemplate: (): string => {
    return getActiveTemplateId()
  },
}

// Helper function to generate CSS variables from a template
export const generateTemplateCSS = (template: Template): string => {
  return `
    --template-primary: ${template.colors.primary};
    --template-secondary: ${template.colors.secondary};
    --template-accent: ${template.colors.accent};
    --template-background: ${template.colors.background};
    --template-text: ${template.colors.text};
    --template-heading-font: ${template.fonts.heading};
    --template-body-font: ${template.fonts.body};
    --template-accent-font: ${template.fonts.accent};
  `
}
